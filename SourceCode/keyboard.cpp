//*************************************************************************************************************
//
// 入力処理[keyboard.h]
// Author : Sekine Ikuto
//
//*************************************************************************************************************
//-------------------------------------------------------------------------------------------------------------
// インクルードファイル
//-------------------------------------------------------------------------------------------------------------
#include "keyboard.h"

//-------------------------------------------------------------------------------------------------------------
// コンストラクタ
//-------------------------------------------------------------------------------------------------------------
Ckeyboard::Ckeyboard()
{
}

//-------------------------------------------------------------------------------------------------------------
// デストラクタ
//-------------------------------------------------------------------------------------------------------------
Ckeyboard::~Ckeyboard()
{
}

//-------------------------------------------------------------------------------------------------------------
// 初期化処理
//-------------------------------------------------------------------------------------------------------------
HRESULT Ckeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	// 初期化
	CInput::Init(hInstance, hWnd);

	// 入力デバイス（キーボード）の作成
	if (FAILED(m_pInput->CreateDevice(GUID_SysKeyboard, &m_pDevice, NULL)))
	{
		return E_FAIL;
	}

	// データフォーマットを設定
	if (FAILED(m_pDevice->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	// 協調モードを設定（フォアグラウンド＆非排他モード）
	if (FAILED(m_pDevice->SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	// アクセス権を獲得(入力制御開始)
	m_pDevice->Acquire();
	return S_OK;

}

//-------------------------------------------------------------------------------------------------------------
// 終了処理
//-------------------------------------------------------------------------------------------------------------
void Ckeyboard::Uninit(void)
{
	CInput::Uninit();
}

//-------------------------------------------------------------------------------------------------------------
// 更新処理
//-------------------------------------------------------------------------------------------------------------
void Ckeyboard::Update(void)
{
	BYTE aKeyState[NUM_KEY_MAX];		// キーボードの入力情報
	int nCntKey;
	// デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(aKeyState), aKeyState)))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			m_aKeyStateTrigger[nCntKey] = aKeyState[nCntKey] ^ m_aKeyState[nCntKey] & aKeyState[nCntKey];
			m_aKeyStateRelease[nCntKey] = (aKeyState[nCntKey] ^ m_aKeyState[nCntKey]) & m_aKeyState[nCntKey];

			m_aKeyState[nCntKey] = aKeyState[nCntKey];	// キープレス情報保存
		}
	}
	else
	{
		m_pDevice->Acquire();						// キーボードへのアクセス権の保存
	}
}

//-------------------------------------------------------------------------------------------------------------
// 生成
//-------------------------------------------------------------------------------------------------------------
Ckeyboard * Ckeyboard::Create(HINSTANCE hInstance, HWND hWnd)
{
	// 生成
	Ckeyboard * pKeyboard = new Ckeyboard;
	// 初期化
	pKeyboard->Init(hInstance, hWnd);
	return pKeyboard;
}

//-------------------------------------------------------------------------------------------------------------
// 押している間
//-------------------------------------------------------------------------------------------------------------
bool Ckeyboard::GetPress(int nKey)
{
	return (m_aKeyState[nKey] & 0x80) ? true : false;
}

//-------------------------------------------------------------------------------------------------------------
// 押した時
//-------------------------------------------------------------------------------------------------------------
bool Ckeyboard::GetTrigger(int nKey)
{
	return (m_aKeyStateTrigger[nKey] & 0x80) ? true : false;
}

//-------------------------------------------------------------------------------------------------------------
// 離した時
//-------------------------------------------------------------------------------------------------------------
bool Ckeyboard::GetRelease(int nKey)
{
	return (m_aKeyStateRelease[nKey] & 0x80) ? true : false;
}

//-------------------------------------------------------------------------------------------------------------
// 押したキーの取得
//-------------------------------------------------------------------------------------------------------------
int Ckeyboard::GetKeyIndex(void)
{
	for (int nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
	{
		if (Ckeyboard::GetPress(nCntKey))
		{
			return nCntKey;
		}
	}
	return -1;
}
